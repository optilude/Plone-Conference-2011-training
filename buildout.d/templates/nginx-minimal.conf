# This is a minimal nginx configuration for a web server that also does
# simple HTTP caching and load balancing, typically running on port 80 (HTTP)
# and 443 (HTTPS).

# Process control

pid ${buildout:directory}/var/nginx.pid;
lock_file ${buildout:directory}/var/nginx.lock;

user ${users:nginx};

worker_processes 1;
daemon off;

# This is limited related to the number of file descriptors available

events {
    worker_connections ${limits:open-files};
}

# Logging

error_log ${buildout:directory}/var/log/nginx-error.log warn;

# HTTP server

http {
    
    # Define Varnish upstream - we proxy to this below
    
    upstream zope {
        server ${hosts:instance1}:${ports:instance1};
        server ${hosts:instance2}:${ports:instance2};
        server ${hosts:instance3}:${ports:instance3};
        server ${hosts:instance4}:${ports:instance4};
    }
    
    # Allow big files
    client_max_body_size 128m;
    
    # Caching
    proxy_cache_path    ${buildout:directory}/var/cache/nginx  levels=1:2 keys_zone=zope:100m max_size=1000m inactive=600m;
    proxy_temp_path     ${buildout:directory}/var/cache/nginx/tmp;
    
    # HTTP server
    server {
        listen *:${ports:http};
        server_name ${hosts:public};
        access_log ${buildout:directory}/var/log/main-access.log;
        
        # Enable gzip compression of responses
        gzip             on;
        gzip_min_length  1000;
        gzip_proxied     any;
        
        # Show status information on /_nginx_status_
        location = /_nginx_status_ {
            stub_status on;
            allow 127.0.0.1;
            deny all;
        }
        
        # Uncomment if you want to log cache hits/misses - useful for
        # debugging
        # log_format cache '***$time_local '
        #                  '$upstream_cache_status '
        #                  'Cache-Control: $upstream_http_cache_control '
        #                  'Expires: $upstream_http_expires '
        #                  '"$request" ($status) '
        #                  '"$http_user_agent" ';
        # 
        # access_log ${buildout:directory}/var/log/cache.log cache;
        
        # Rewrites/proxying
        
        location / {
            
            # Content author users (authenticatd with the Plone login cookie)
            # are forced to SSL always
            if ($http_cookie ~* "__ac") {
                rewrite ^/(.*)$ https://${hosts:public}:${ports:https}/$1 redirect;
            }
            
            # The content author login form requires SSL
            rewrite ^(.*/login_form)$    https://${hosts:public}:${ports:https}$1 redirect;
            rewrite ^(.*/require_login)$ https://${hosts:public}:${ports:https}$1 redirect;
            
            # Other pages are served from http, using virtual hosting
            rewrite ^/(.*)$ /VirtualHostBase/http/${hosts:public}:${ports:http}/${sites:main}/VirtualHostRoot/$1 break;
            
            # Pass to the backend with caching
            
            proxy_redirect                  off;
            proxy_set_header                Host $host;
            proxy_set_header                X-Real-IP $remote_addr;
            proxy_set_header                X-Forwarded-For $proxy_add_x_forwarded_for;
            client_max_body_size            0;
            client_body_buffer_size         128k;
            proxy_send_timeout              120;
            proxy_buffer_size               4k;
            proxy_buffers                   4 32k;
            proxy_busy_buffers_size         64k;
            proxy_temp_file_write_size      64k;
            proxy_connect_timeout           75;
            proxy_read_timeout              205;
            
            proxy_pass                      http://zope;
            
            proxy_cache                     zope;
            proxy_cache_key                 $scheme$proxy_host$request_uri;
            
            # Don't cache if the __ac login cookie is set
            proxy_cache_bypass              $cookie___ac;
        }
    }
    
    # HTTPS server
    server {
        listen  *:${ports:https};
        server_name ${hosts:public};
        access_log ${buildout:directory}/var/log/main-access.log;
        
        ssl on;
        ssl_certificate      ${ssl:certificate};
        ssl_certificate_key  ${ssl:key};
        
        keepalive_timeout    70;
        
        # Enable gzip compression of responses
        gzip             on;
        gzip_min_length  1000;
                
        location / {
            
            # Admin users are always managed over SSL
            if ($http_cookie ~* "__ac" ) {
                rewrite ^/(.*)$ /VirtualHostBase/https/${hosts:public}:${ports:https}/${sites:main}/VirtualHostRoot/$1 break;
            }
            
            # The content author login form requires SSL
            rewrite ^(.*/login_form)$    /VirtualHostBase/https/${hosts:public}:${ports:https}/${sites:main}/VirtualHostRoot$1 break;
            rewrite ^(.*/require_login)$ /VirtualHostBase/https/${hosts:public}:${ports:https}/${sites:main}/VirtualHostRoot$1 break;
            
            # Resources are allowed over SSL
            rewrite ^/(.*\.(css|kss|js|jpg|jpeg|gif|png))$ /VirtualHostBase/https/${hosts:public}:${ports:https}/${sites:main}/VirtualHostRoot/$1 break;
            
            # Everything else is redirected back to http
            rewrite ^/(.*)$ http://${hosts:public}:${ports:http}/$1 permanent;
            
            # Pass to the backend with caching
            
            proxy_redirect                  off;
            proxy_set_header                Host $host;
            proxy_set_header                X-Real-IP $remote_addr;
            proxy_set_header                X-Forwarded-For $proxy_add_x_forwarded_for;
            client_max_body_size            0;
            client_body_buffer_size         128k;
            proxy_send_timeout              120;
            proxy_buffer_size               4k;
            proxy_buffers                   4 32k;
            proxy_busy_buffers_size         64k;
            proxy_temp_file_write_size      64k;
            proxy_connect_timeout           75;
            proxy_read_timeout              205;
            
            proxy_pass                      http://zope;
            
            proxy_cache                     zope;
            proxy_cache_key                 $scheme$proxy_host$request_uri;
            
            # Don't cache if the __ac login cookie is set
            proxy_cache_bypass              $cookie___ac;
        }
        
    }
}
